1. Design Primary contract:
- Objective, variables and functions purpose
2. Write the contract in Solidity
3. Create the Factory contract that allow us to create multiple instances
of the primary contract from the user perspective

4.Project setup:
Inside of our bet directory
-npm init
-npm install --save ganache-cli mocha solc fs-extra web3@1.0.0-beta.26
Updated command (the one I ran):
-npm install --save ganache-cli mocha solc@0.4.17 fs-extra web3@1.3.5

5. Project folder restructuring:
Inside of our bet directory, I create an ethereum folder.
Inside of the ethereum folder , I create a compile.js file, a deploy. js file
and an extra folder: contracts
Inside of the contracts folder, I move the Bet.sol file

6.Compiling.
Inside of our ethereum folder , we are creating a build folder.
Our compile.js file will be ran only once.
It will:
- delete everything in the build folder
- read Bet.sol from the contracts folder
- Compile both Factory and Bet contracts with solc@04.17
- Write output to the build folder

6b. Now we wrote our compile.js file,we can:
- cd etheureum
- node compile.js
To test our compiler


7. Test file setup

-New folder creation
-Setup the test file:
  -import 'require' assert module, gananche-cli module (local test network),
   web3 library
  and we create a new instance of web3 to which we plug the ganache provider.
  We also get the compiled contracts from the build directory.
  Then, we pass those compiled contracts -JSON parsed- to the 'new web3.eth.Contract()'
  And we access the functions within that contract via the .methods property
  We access the address via the options.address property
- We then write the tests with a beforeEach at the beginning that creates
for us the contracts instances to test,
- then in package.json we edit the 'test' line with 'test':'mocha'
-then we can go to the cd bet directory and run 'npm run test' to see if first tests
works fine
- Then we can actually keep on going with the tests


7b. Implement all deemed necessary tests - questions arised on gasUsed - see Challenges

8. Deployment
- bet directory: we npm install --save truffle-hdwallet-provider@0.0.3
- In our deployment script, we'll require: const HDWalletProvider = require("truffle-hdwallet-provider");
- We setup the new provider:' const provider = new HDWalletProvider(
  "satoshi frozen ....'
- And we create a new function const deploy = async () => { in which Ill save the
variable 'accounts','result' with the result of the contract deployed
and we make sure to console.log the address of the contract deployed:
console.log("Contract deployed to", result.options.address);
-Then we cd etheureum and run 'node deploy.js'

****address of my deployed contract to the Rinkeby network : 0x2bcA21280148Dbe49860194e76780B0fb148AA8A*****


Then: web application to build around it.

9. Front end Setup

9a.Web mockup + route structure:
/: List of bets
/bets/new: Form to make a new bet
/bets/0x847: Bet details for bet at address ...

- We'll use Next.js
Inside our bet directory:
  -cli://sudo npm install -g create-react-app
  -npm install next react react-dom

- Inside of our project directory 'bet', we create a new folder: 'pages'
Every .js file we place within that folder will be turned into a
visitable web page

- As an example, we create two .js files within pages folder with:
import React from 'react'
export default ()=>{
return <h1> This is a new page <h1>
}

In both files with a different h1, then inside of package.json,we add a new line
in 'scripts':{
"test":"mocha",
"dev":"next dev"
}

- This will allow us to run the command: npm run dev. ( See challenges in case we got stuck)

-Inside of our pages folder: we place index.js. This is set automatically as the root file
by next.js

********To do now**
- configure web3 with a provider from metamask
- tell web3 that a deployed copy of the BetFactory exists
- use Factory instance to retrieve a list of deployed bets
- Use React to show something about each bet
***********************

10. Showing up contract info in our webpage.

10a. We first access via Remix, the betFactory at the address deployed And
via metamask we create a first Bet so that we have something to show in Our
webpage

10b. We create two new files: web3.js and factory.js inside of our ethereum folder.

-factory.js:
  .We import web3 from the web3.js -provider setup file- that we just created
  .We import BetFactory from the compiled json file
  .We access the contract BetFactory at the address deployed and assign to a variable
  .We export that variable

-web3.js:
As we are working with Next.js we have to understand how it works. With Next.js
our code will first run in our server (node) and render a html document that it
will send to our browser. Once the html initialized, it will start runnig the
code in the browser which can then take over the code execution for rerendering.

  This means we have to handle 2 configurations of our web3/provider instance:

    -When running on the server: const provider = new HDWalletProvider("mneumonic",
    "https:rinkeby...") and then web3=new Web3(provider)

    -When running on the browser: web3=new Web3(window.ethereum)

  To check whether we are running on the server or the browser, we can do a
  condition if(typeof window !== "undefined" && typeof window.web3 !== "undefined")
  To further check these values, we can try :typeof window in the chrome console
  and then typeof window in our cli after typing 'node' and see what is returned.

  .The imports required are 'Web3' and const HDWalletProvider = require("truffle-hdwallet-provider")
  for configuration of the provider when not using metamask

  .Then, we can export that variable

10c. Modify index.js so that it shows our contract information

  .We first import React
  .We want to create a class based component so we also import {Component} from 'react'
  .We also import our factory variable from the factory.js file newly created

  .We create a BetIndex class: 'class BetIndex extends Component{
  }'
  .Then within that component , we place an async componentDidMount(){
  const bets=await factory.methods.getDeployedBets().call();
  console.log(bets);
  }

  This componentDidMount is async and it allow us to execute the React code Once
  the component is already placed in the DOM

  .The other thing we have to place within that BetIndex component is the render
  method:render(){
  return <div>Bets Index! </div>
  }
  Otherwise it will complain.

  .Finally, we have to export default BetIndex. Next.js always expect us to
  export something from our index.js file.

Once all the bullet points in 10 are done, we can see the Bet address deployed
via remix in our browser console

.Next : replace componentDidMount by getInitalProps and understand how it works
as componentDidMount does not execute on the server
.Then: put some css and semantic-ui cards


11. Edit index.js so we can do server side execution of the contract fecthing data
  componentDidMount is only executed on the browser so we change that function
  by getInitialProps.
  The workflow with getInitalProps is that inside a component, this will get
  executed first, so inside of it , we'll do our contract data feching. Then,
  it will return the result to our component as a props, and our component
  will keep executing the rest of its code to return a html to the browser.

  Note: we place the keyword 'static' in front of the function do that we can
  directly access the properties of 'the class' with {this.props.bets} without having
  to create an instance.
  Usually to access properties of a class, we have to create an instance first.
  ex: car=new Car()
  car.color

  But if we use the 'static' keyword in front of the class, we can directly
  access the properties of that class w/o creating an instance
  ex: Car.color

  We then resturn an onject from getInitialProps that will be used as a props
  and can be access by the render method of our component

  static async getInitialProps() {
    const bets = await factory.methods.getDeployedBets().call();

    return { bets: bets };
  }

  render() {
    return <div>{this.props.bets}</div>;
  }

  12a.Getting a Card-Group Styling from semantic-ui
  npm install --save semantic-ui-react
  npm install --save semantic-ui-css
  documentation https://react.semantic-ui.com/

  12b.We decide to show a Card from semantic-ui in our website.In our index.js file:
  .import {Card} from "semantic-ui-react"
  .Then we define another function inside our Component that
  constructs the items to be passed to our Card.group object that gets itself returned.

  renderBets() {
    const items = this.props.bets.map((address) => {
      return {
        header: address,
        description: <a>View Bet</a>,
        fluid: true,
      };
    });

    return <Card.Group items={items} />;
  }

  12c.We call that function created inside of our render() function,
  valled with {this.renderBets()} and we also hardcode the css link provided by semantic-ui
  in our rendered <div>:

  render() {
    return (
      <div>
        <link
          async
          rel="stylesheet"
          href="https://cdn.jsdelivr.net/npm/semantic-ui@2/dist/semantic.min.css"
        />
        {this.renderBets()}
      </div>
    );
  }

13.Adding a non-functional Button
.In our index.js file, we can . import {Button} from 'semantic-ui-react'

Then place the button in the returned div of our render() function

render(){
return(
<div>
........
<Button content="Create Bet" icon="add circle" primary />
</div>
)
}


****To do: addding a Layout Component now,then define the routing , then
do a form creation for our Bet

14.Setting up a common component to all of our pages
. As Next.js will attempt to create a page of all our .js files within pages folder,
we'll create a new folder 'components', parallel (brother) of pages folder,where
we place our Layout.js file. We can then write all of the .js that is common to
our pages.
Our Layout.js file will behave as the parent of the rest of the pages.
So we write, after importing react:

export default (props) => {
  return (
    <div>
      <h1>Im a header</h1>
      {props.children}
      <h1>Im a footer</h1>
    </div>

And then, inside of our index.js file, we import Layout, and in the render menthod,
we wrap the rendered <div> by <Layout> tags.

Now, all of the what is inside of the <Layout> tag , will be seen as 'props.children'
in our Layout component.



-----
Challenges:
- Add the requirements to every possible value transfer

- Everytime the contract balance is being altered
And keep track of the balance thanks to a contractBalance variable being
updated everytime there is a possible change on the contract balance.

- In case of primary contract constructor being payable,
how to pass value from the Factory contract to the child/primary contract,
see line address newBet=(new Bet).value(msg.value)(desc, valueStaked,msg.sender);


- To set up the bet instance , we had to provide money, so we discovered a newBet
parameter in the .send() from web3 - which is 'value'
ex: .send({ from: accounts[0], gas: "1000000", value: 1000000 });


- First test: I wanted to make sure the manager was acutally accounts[0].
So I just tried assert.equal(accounts[0], bet.methods.manager);

but the manager variable wasn't that easy to retrieve. Instead, I had to do
an async/await function before, like so:

it('sets the caller as the manager',async()=>{
manager=await bet.methods.manager().call()

assert.equal(accounts[0],manager);
})

What we learn: variables have to be called with () as well and inside of an
async await


- Tests expecting an error:
try{}
assert(false);
catch(e){assert(e);}

We explicitly assert(false) after the try catch in case, that line of code is ran,
 the whole test fails. Otherwise, catch the error and assert(e) makes sure that
 we do have an object error.
 We learn also that every 'it' block is independent of the others and a
 unique instance of 'bet' is being created for each 'it' block, due to the
 beforeEach block.

- To check an accounts balance: await web3.eth.getBalance(accounts[0])

-assert(false) doesnt seem to fail my test

- The real assert to check equality for numbers, should have been

assert(posteriorManagerBalance === priorManagerBalance + contractBalance);

But this will always fail due to the gas spent

On gasUsed by a transaction, we can get access to this variable via
getTransactionReceipt from a transaction and view the transactionHash property/key
of that object

example:

txn = await bet.methods
  .isManageRight(false)
  .send({ from: accounts[0], gas: "1000000" });

receipt = await web3.eth.getTransactionReceipt(txn.transactionHash);
console.log(receipt.gasUsed);

********To do: work out the exact balances taking into account gasUsed*******


FRONT END


- Challenge while trying running npm run dev :Error: ENOSPC: System limit for number of file watchers reached
The error ENOSPC means that your hard drive is full.
This command fixed it before running npm run dev:
echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p



-Github warning: : warning: File .next/cache/webpack/client-development/11.pack is
66.02 MB; this is larger than GitHub's recommended maximum file size of 50.00 MB.

See what to do with these cases
